export AWS_ACCESS_KEY_ID="mock_secret" && \
export AWS_SECRET_ACCESS_KEY="mock_secret" && \
export AWS_DEFAULT_REGION="us-east-2"

aws --endpoint-url=http://localhost:4566 lambda list-functions

=========

docker-compose down --volumes && docker-compose up -d
terraform init -backend-config=backend-config.tfvars -backend-config=backend-config.local.tfvars -reconfigure

aws --endpoint-url=http://localhost:4566 s3api create-bucket --bucket=lambda-api-testing-poc-1

=======

echo 'var.bucket' | terraform console -var-file backend-config.tfvars -compact-warnings

Didn't work:
echo 'var.bucket' | terraform console -var-file backend-config.tfvars | awk '/Warnings/ {exit} {print}'

=======

aws --endpoint-url=http://localhost:4566 s3api list-buckets
aws --endpoint-url=http://localhost:4566 s3api list-objects --bucket lambda-api-testing-poc-1
aws --endpoint-url=http://localhost:4566 s3api put-object --bucket lambda-api-testing-poc-1 --key testkey --body ../README.md
aws --endpoint-url=http://localhost:4566 s3api put-object --bucket lambda-api-testing-poc-1 --key terraform.tfstate
aws --endpoint-url=http://localhost:4566 s3api delete-object --bucket lambda-api-testing-poc-1 --key terraform.tfstate

=======

aws --endpoint-url=http://localhost:4566 dynamodb scan \
    --table-name terraform-state-lock
	
aws --endpoint-url=http://localhost:4566 dynamodb scan \
    --table-name doodle-proto-table

=======

tar --help | grep '  \-a'

# This creates an invalid zip file:
# tar -a -c -C ../backend/lambdas/api -f ../backend/lambdas/api/test.zip index.mjs
# Using -z with `tar` command (Gzipping) doesn't work either:
# tar -az -c -C ../backend/lambdas/api -f ../backend/lambdas/api/test.zip index.mjs

# Use `zip` instead - However this is not installed in Windows Git Bash
# zip ../backend/lambdas/api/test.zip ../backend/lambdas/api/index.mjs
# Or redirect output using `-` so it will overwrite?
# zip - ../backend/lambdas/api/index.mjs >../backend/lambdas/api/test.zip

# Use Git archive to create a zip without much success:
# git archive --format=zip --output=../backend/lambdas/api/test.zip main backend/lambdas/api/index.mjs
# git archive --format=zip --output=test.zip "$(git rev-parse --abbrev-ref HEAD)" backend/lambdas/api/index.mjs
# git archive --format=zip -o test.zip HEAD:backend/lambdas/api

Just use archive from terraform

=======

docker-compose down --volumes && docker-compose up -d
# rm -rf .terraform
[ ! -d .terraform ] || find .terraform -type f ! -name "*.exe" -delete
rm terraform.tfstate
rm terraform.tfstate.backup
mv backend.tf.backup backend.tf
sh startup.sh

mv backend.tf backend.tf.backup
terraform init -migrate-state
terraform apply -target module.remote_state -var-file=terraform.local.tfvars
# terraform apply -target module.remote_state -var-file=terraform.local.tfvars -auto-approve
mv backend.tf.backup backend.tf
terraform init -backend-config=backend-config.tfvars -backend-config=backend-config.local.tfvars -migrate-state
terraform apply -var-file=terraform.local.tfvars

=======

Execute the shell script in source mode to persist the exported variables:

> Source-ing the script pollutes/alters your current environment. It could have future session effects down the line

. startup.sh

=====

# TRACE, DEBUG, INFO, WARN, ERROR
export TF_LOG=DEBUG
terraform apply -target aws_iam_role.lambda_role -var-file terraform.local.tfvars
terraform apply -target aws_lambda_function.doodle_lambda -var-file terraform.local.tfvars

=========

aws --endpoint-url=http://localhost:4566 \
  lambda create-function \
  --description "" \
  --function-name doodle_table_crud_lambda \
  --handler "module.handler" \
  --memory-size 128 \
  --package-type Zip \
  --role "arn:aws:iam::000000000000:role/lambda_role" \
  --runtime "nodejs18.x" \
  --timeout 3 \
  --code "S3Bucket=lambda-api-testing-poc-1,S3Key=lambda.zip"